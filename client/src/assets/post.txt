import { useState, useEffect } from "react";
import axios from "axios";
import "./index.scss";

function PostForm() {
  const [postData, setPostData] = useState({});
  const [data, setData] = useState({ post: "", image: null });
  const [comment, setComment] = useState("");
  // const [like, setLike] = useState(Number);
  // const [dislike,setDislike] = useState(postData.data.dislike);

  const handleComment = async (event, id) => {
    event.preventDefault();
    const result = await axios.post(`/comments/${id}`, { comment });
    console.log(result.data);
    setComment("");
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  };

  const handleLike = async (item) => {
    // Increment the like count locally
    item.like += 1;
    try {
      // Send a PATCH request to update the like count on the server
      const result = await axios.patch(`/post/${item.id}`, {
        like: item.like,
      });
      console.log(result); // Log the result of the PATCH request
    } catch (error) {
      console.error("Error updating like count:", error);
      // Handle error if needed
    }
  };

  const handelDislike = async (item) => {
    // Increment the like count locally
    item.dislike += 1;
    try {
      // Send a PATCH request to update the like count on the server
      const result = await axios.patch(`/post/${item.id}`, {
        dislike: item.dislike,
      });
      console.log(result); // Log the result of the PATCH request
    } catch (error) {
      console.error("Error updating like count:", error);
      // Handle error if needed
    }
  };

  // const handelDislike = (item) =>{

  // }

  useEffect(() => {
    const getData = async () => {
      const result = await axios.get("/post/");
      setPostData(result.data);
      console.log(result.data);
    };
    getData();
  }, [data]);

  const [expandedPostIndex, setExpandedPostIndex] = useState(null);

  const togglePostExpansion = (index) => {
    if (index === expandedPostIndex) {
      setExpandedPostIndex(null);
    } else {
      setExpandedPostIndex(index);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const { post, image } = data;
      const formData = new FormData();
      formData.append("post", post);
      formData.append("image", image);

      const result = await axios.post("/post/", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      console.log(result);
      // Assuming the response contains updated data
      setData(result.data);
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error("Error:", error);
      // Handle error here
    }
  };

  return (
    <>
      <div className="form-container">
        <form
          className="post-form"
          onSubmit={(e) => {
            handleSubmit(e);
          }}
        >
          <input
            type="text"
            name="post-text"
            placeholder="Write something..."
            value={data.post}
            onChange={(e) => setData({ ...data, post: e.target.value })}
          />
          <input
            type="file"
            name="post-image"
            accept="image/*"
            onChange={(e) => setData({ ...data, image: e.target.files[0] })}
          />
          <button type="submit">Post</button>
        </form>
      </div>
      <div className="post">
        {postData.data?.map((item, i) => (
          <div key={i} className="post-grid">
            <div className="post-title" style={{ color: "black" }}>
              The Guarden
            </div>
            <div className="post-meta">
              {`Author: ${item.user.name} | Date Posted: ${new Date(
                item.date
              ).toDateString()}`}
            </div>
            <div className="post-content">
              <p
                onClick={() => togglePostExpansion(i)}
                className={expandedPostIndex === i ? "expanded" : ""}
              >
                {expandedPostIndex === i
                  ? item.post
                  : item.post.length > 50
                  ? `${item.post.substring(0, 50)}(...read more)`
                  : item.post}
              </p>
              <img
                className="post-image"
                src={item.image}
                alt="Image Description"
              />
            </div>
            <div className="post--features">
              <button
                className="ion"
                onClick={() => {
                  handleLike(item);
                }}
              >
                Like
              </button>
              <button
                className="ion"
                onClick={() => {
                  handelDislike(item);
                }}
              >
                Dislike
              </button>
              <button className="ion">Comment</button>
            </div>
            <div className="commentbox">
              <h1>Comment</h1>
              <div className="comment-input">
                <form
                  className="comment-form"
                  onSubmit={(event) => {
                    handleComment(event, item.id);
                  }}
                >
                  <input
                    type="text"
                    name="comment-text"
                    placeholder="Write something..."
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                  />
                  <button type="submit">Post</button>
                </form>
              </div>
              {item?.comments.map((el, j) => (
                <div key={j} className="comments">
                  <div className="comment">
                    <div className="comment-metadata">
                      {`Author: ${el.user.name} | Date Posted: ${new Date(
                        el.date
                      ).toDateString()}`}
                    </div>
                    <div className="comment-content" style={{ color: "black" }}>
                      <p>{el.comment}</p>
                    </div>
                    <hr />
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </>
  );
}

export default PostForm;


import axios from "axios";
import { useState } from "react";
import PropTypes from "prop-types";
const PostCard = ({ data }) => {
  const [comment, setComment] = useState("");

  const [expandedPostIndex, setExpandedPostIndex] = useState(null);

  const togglePostExpansion = (index) => {
    if (index === expandedPostIndex) {
      setExpandedPostIndex(null);
    } else {
      setExpandedPostIndex(index);
    }
  };

  const handleComment = async (event, id) => {
    event.preventDefault();
    const result = await axios.post(`/comments/${id}`, { comment });
    console.log(result.data);
    setComment("");
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  };

  const handleLike = async (item) => {
    // Increment the like count locally
    item.like += 1;
    try {
      // Send a PATCH request to update the like count on the server
      const result = await axios.patch(`/post/${item.id}`, {
        like: item.like,
      });
      console.log(result); // Log the result of the PATCH request
    } catch (error) {
      console.error("Error updating like count:", error);
      // Handle error if needed
    }
  };

  const handelDislike = async (item) => {
    // Increment the like count locally
    item.dislike += 1;
    try {
      // Send a PATCH request to update the like count on the server
      const result = await axios.patch(`/post/${item.id}`, {
        dislike: item.dislike,
      });
      console.log(result); // Log the result of the PATCH request
    } catch (error) {
      console.error("Error updating like count:", error);
      // Handle error if needed
    }
  };

  return (
    <div>
      {Array.isArray(data) ? (
        data?.map((item, i) => (
          <div key={i} className="post-grid">
            <div className="post-title" style={{ color: "black" }}>
              {item.title}
            </div>
            <div className="post-meta">
              {`Author: ${item.user.name} | Date Posted: ${new Date(
                item.date
              ).toDateString()}`}
            </div>
            <div className="post-content">
              <p
                onClick={() => togglePostExpansion(i)}
                className={expandedPostIndex === i ? "expanded" : ""}
              >
                {expandedPostIndex === i
                  ? item.post
                  : item.post.length > 50
                  ? `${item.post.substring(0, 50)}...read more`
                  : item.post}
              </p>
              <img
                className="post-image"
                src={item.image}
                alt="Image Description"
              />
            </div>
            <div className="post--features">
              <button
                className="ion"
                onClick={() => {
                  handleLike(item);
                }}
              >
                Like
              </button>
              <button
                className="ion"
                onClick={() => {
                  handelDislike(item);
                }}
              >
                Dislike
              </button>
              <button className="ion">Comment</button>
            </div>
            <div className="commentbox">
              <h1>Comment</h1>
              <div className="comment-input">
                <form
                  className="comment-form"
                  onSubmit={(event) => {
                    handleComment(event, item.id);
                  }}
                >
                  <input
                    type="text"
                    name="comment-text"
                    placeholder="Write something..."
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                  />
                  <button type="submit">Post</button>
                </form>
              </div>
              {item?.comments.map((el, j) => (
                <div key={j} className="comments">
                  <div className="comment">
                    <div className="comment-metadata">
                      {`Author: ${el.user.name} | Date Posted: ${new Date(
                        el.date
                      ).toDateString()}`}
                    </div>
                    <div className="comment-content" style={{ color: "black" }}>
                      <p>{el.comment}</p>
                    </div>
                    <hr />
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      ) : (
        <p>No data available</p>
      )}
    </div>
  );
};

PostCard.propTypes = {
  data: PropTypes.array.isRequired,
};

export default PostCard;



